# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# The pgxl image to use in all pods.
image: "pavouk0/postgres-xl:XL_10_R1_1-6-g68c378f-4-g7a65119"
# the home directory depends on the image and will determine teh 
# data storeage location. the use posgtres must have access to this directory.
homedir: "/var/lib/postgresql"
# This is the env set that appends to all pods.
# will not affect the db configuration.
envs:
# The env set that appends to all pods.
# may affect the db configuration.
overrideEnvs:
# add extra labels to all pods.
extraLabels:

# general config.
config:
  # The log level to use, accepts : ERROR, WARNING, INFO, DEBUG, DEBUG (1-5)
  log_level: warning
  # the port for managers (GTM and proxy)
  managers_port: 6666
  # the internal databsae port (postgres)
  postgres_port: 5432
  # the root user
  postgres_user: postgres
  # Append to the varius config files.
  append:
    # append to gtm.
    gtm:
    # append to all proxies.
    poxy:
    # append to all datanodes.
    datanode:
    # append to all coordinators.
    coordinator:

security:
  # If exists will load all passwords from secrets.
  passwords_secret_name:
  # If passwords_secret_name exists, is the name of the secret
  # key. Otherwise the password.
  pg_password:
  # Set the password authentication method
  postgres_auth_type: md5

# Configuration for a job that is called when the database
# has finisjed loading.
on_load:
  enabled: false
  # the number of times the job will restart.
  back_off_limit: 5
  # if set, will deterime the startup script resources.
  resources:
    limits:
      memory: "250Mi"
      cpu: "250m"
  # array of startup scripts, to be called whenever
  # the database is loaded. 
  startup:
  # array of init scripts to be called only when the 
  # the database is first initialized.
  init:
    # Example sccripts
    ###
    # - name: create_database.sh
    #   script: |-
    #     psql -c "CREATE DATABASE tester;"
    #     export PGDATABASE="tester"
    # - name: create_base_tables.sql
    #   script: |-
    #     CREATE SCHEMA test;
    #     CREATE TABLE test.lama as (SELECT 'the brown rabbit' as col_1);

# the coordinators external service.
service:
  enabled: true
  port: 5432
  type: LoadBalancer

gtm:
  resources:
    limits:
      memory: "2Gi"
      cpu: "2"
  pvc:
  # addons
  addContainers:
  volumes:
  volumeMounts:
  # overrides
  injectMainContainerYaml:
  injectDepYaml:
  injectSTSYaml:

proxies:
  enabled: true
  count: 1
  thread_count: 3
  resources:
    limits:
      memory: "1Gi"
      cpu: "1"
  # addons
  addContainers:
  volumes:
  volumeMounts:
  # overrides
  injectMainContainerYaml:
  injectSpecYaml:
  injectSTSYaml:

coordinators:
  count: 1
  resources:
    limits:
      memory: "1Gi"
      cpu: "1"
  pvc:
  # addons
  addContainers:
  volumes:
  volumeMounts:
  # overrides
  injectMainContainerYaml:
  injectSpecYaml:
  injectSTSYaml:

datanodes:
  count: 1
  resources:
    limits:
      memory: "1Gi"
      cpu: "1"
  pvc:
  # addons
  addContainers:
  volumes:
  volumeMounts:
  addVolumeClaims:
  # overrides
  injectMainContainerYaml:
  injectSpecYaml:
  injectSTSYaml:
